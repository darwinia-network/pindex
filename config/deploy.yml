# Name of your application. Used to uniquely configure containers.
service: pindex

# Name of the container image.
image: wuminzhe/pindex

# Deploy to these servers.
servers:
  web:
    hosts:
      - 123.58.217.13
    options:
      add-host: host.docker.internal:host-gateway
    labels:
      traefik.http.routers.web.rule: Host(`ormp.g4d.pro`)
      traefik.http.routers.web_secure.entrypoints: websecure
      traefik.http.routers.web_secure.rule: Host(`ormp.g4d.pro`)
      traefik.http.routers.web_secure.tls: true
      traefik.http.routers.web_secure.tls.certresolver: letsencrypt
  job1:
    hosts:
      - 123.58.217.13
    options:
      add-host: host.docker.internal:host-gateway
    cmd: "bin/pindex"

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: wuminzhe

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
env:
  clear:
    POSTGRES_HOST: host.docker.internal
    POSTGRES_USERNAME: postgres
    RAILS_SERVE_STATIC_FILES: true
    REDIS_URL: redis://host.docker.internal:6379/0
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD

# Use a different ssh user than root
ssh:
  user: ubuntu

# Configure builder setup.
builder:
  remote:
    arch: amd64
    host: ssh://ubuntu@123.58.217.13

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:16-alpine
    host: 123.58.217.13
    port: 5432
    env:
      clear:
        POSTGRES_USER: 'postgres'
        POSTGRES_DB: 'pindex_production'
      secret:
        - POSTGRES_PASSWORD
    volumes:
      - postgres:/var/lib/postgresql/data
  redis:
    image: redis:7-alpine
    roles:
      - web
    port: 6379
    volumes:
      - redis:/data


# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "wuminzhe@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
#   host_port: 4300

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000
